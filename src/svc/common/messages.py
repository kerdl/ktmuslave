from __future__ import annotations
from typing import Any, Optional
from src.data.settings import Settings

from src.svc import common
from src.data import zoom, format as fmt, schedule
from src.data.schedule import compare
from src.parse.zoom import Key
from src.svc.common.states import State
from src.svc.common.keyboard import Text, Payload


DEBUGGING = False


class Builder:
    def __init__(
        self, 
        separator: str = "\n\n",
    ) -> None:
        self.separator = separator
        self.components: list[str] = []
    
    def add(self, text: str) -> Builder:
        if text == "":
            return self

        self.components.append(text)
        return self
    
    def add_if(self, text: str, condition: bool):
        if condition:
            self.add(text)
        
        return self

    def make(self) -> str:
        return self.separator.join(self.components)


#### Common footers and headers ####

def default_footer_addition(everything: common.CommonEverything):
    """
    # Notice about bot mentioning

    ## Why
    - we filter anything that is not for us
    - so we should ask user to reply
    or mention the bot
    """

    from src import defs

    mention = ""
    footer_addition = ""

    if everything.is_group_chat:

        if everything.is_from_vk:
            mention = defs.vk_bot_mention
            footer_addition = format_mention_me(mention)

        elif everything.is_from_tg:
            footer_addition = format_reply_to_me()
    
    return footer_addition

DEBUG = (
    "8==oü§Æ trace:\n"
    "{trace}\n"
    "8==oü§Æ back_trace:\n"
    "{back_trace}\n"
)
def format_debug(trace: list[State], back_trace: list[State], last_bot_message: common.CommonBotMessage, settings: Settings):
    
    def fmt_trace(trace: list[State]):
        return "\n".join([f"‚ÄÄ‚ÄÄ‚ÄÄ{state.space}:{state.anchor}" for state in trace])
    
    trace_str = fmt_trace(trace)
    back_trace_str = fmt_trace(back_trace)

    return DEBUG.format(
        trace            = trace_str,
        back_trace       = back_trace_str,
    )


CANT_PRESS_OLD_BUTTONS = (
    "–ü–æ—Å–æ—Å–∏ üòí –í–æ—Ç —Ç–µ–±–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
    "–Ω–∞ –Ω—ë–º –∏ —Ç—ã–∫–∞–π –∫—É–¥–∞ —Ç–µ–±–µ –Ω–∞–¥–æ"
)
def format_cant_press_old_buttons():
    return CANT_PRESS_OLD_BUTTONS

SENT_AS_NEW_MESSAGE = (
    "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"
)
def format_sent_as_new_message():
    return SENT_AS_NEW_MESSAGE

EMPTY_PAGE = (
    "ü§î | –ü–æ–∫–∞ —Å—é–¥–∞ –Ω–∏—Ö—É—è –Ω–µ –∑–∞–≤–µ–∑–ª–∏"
)
def format_empty_page():
    return EMPTY_PAGE


NO_MORE_PAGES = (
    "‚ñ† –î–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç"
)
def format_no_more_pages() -> str:
    return NO_MORE_PAGES


PRESS_BEGIN = (
    f"üëá –ù–∞–∂–∏–º–∞–π {Text.BEGIN}, —Ö—É–ª–µ"
)
def format_press_begin():
    return PRESS_BEGIN


GROUPS = (
    "üñï | –ì—Ä—É–ø–ø—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ {groups}"
)
def format_groups(groups: list[str]):
    groups_str = ", ".join(groups)
    return GROUPS.format(groups=groups_str)


MENTION_ME = (
    "üòÆ –ï—â—ë —É–ø–æ–º—è–Ω–∏ –º–µ–Ω—è: {mention}, –∏–Ω–∞—á–µ –Ω–µ —É–≤–∏–∂—É üòÆ"
)
def format_mention_me(mention: str):
    return MENTION_ME.format(mention=mention)


REPLY_TO_ME = (
    "üòÆ –ï—â—ë ‚Ü©Ô∏è –æ—Ç–≤–µ—Ç—å ‚Ü©Ô∏è –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –Ω–µ —É–≤–∏–∂—É üòÆ"
)
def format_reply_to_me():
    return REPLY_TO_ME


CHAT_WILL_MIGRATE = (
    "ü§î –ò–∑-–∑–∞ —ç—Ç–æ–≥–æ, —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ —Å—Ç–∞–Ω–µ—Ç —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π ü§î\n"
    "–ß–∏—Ç–∞–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∑–¥–µ—Å—å: https://teleme.io/articles/turn_a_telegram_group_into_a_supergroup?hl=ru"
)
def format_chat_will_migrate():
    return CHAT_WILL_MIGRATE


PAGE_NUM = (
    "üìÑ | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current}/{last}"
)
def format_page_num(current: int, last: int):
    return PAGE_NUM.format(current=current, last=last)


PRESS_BUTTONS_TO_CHANGE = (
    "üëá | –ù–∞–∂–º–∏ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä, —á—Ç–æ–±—ã –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å"
)
def format_press_buttons_to_change():
    return PRESS_BUTTONS_TO_CHANGE


NO_TEXT = (
    "‚ùå | –ù—É —Ç—ã –±—ã–¥–ª–æ, —Ç—É—Ç –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞"
)
def format_no_text():
    return NO_TEXT


CURRENT_VALUE = (
    "üìù | –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}"
)
def format_current_value(value: Any):
    return CURRENT_VALUE.format(
        value = fmt.value_repr(value)
    )


CANT_CONNECT_TO_SCHEDULE_SERVER = (
    f"ü§î | –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
)
def format_cant_connect_to_schedule_server() -> str:
    return CANT_CONNECT_TO_SCHEDULE_SERVER


#### Full messages for specific states ####

WELCOME =  (
    "üë®üèø –ë—É–¥—É –ø–∏–∑–¥–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ "
    "—Å üåê ktmu-sutd.ru üåê "
    "–∏ –¥–µ–ª–∏—Ç—å—Å—è —Å {count}"
)
def format_welcome(is_group_chat: bool):
    if is_group_chat:
        return WELCOME.format(count="–≤–∞–º–∏")
    else:
        return WELCOME.format(count="—Ç–æ–±–æ–π")


GROUP_INPUT = (
    "üíÖ | –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ –§–æ—Ä–º–∞—Ç: 1–∫–¥–¥69, 1-–∫–¥–¥-69, 1–ö–î–î69, 1-–ö–î–î-69\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç—É, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ"
)
def format_group_input():
    return GROUP_INPUT


UNKNOWN_GROUP = (
    "‚ùì | {group} –ø–æ–∫–∞ –Ω–µ—Ç, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å?"
)
def format_unknown_group(group: str):
    return UNKNOWN_GROUP.format(group=group)


INVALID_GROUP = (
    "‚ùå | –≠—Ç–∞ —Ö—É–π–Ω—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç: 1–∫–¥–¥69, 1-–∫–¥–¥-69, 1–ö–î–î69, 1-–ö–î–î-69\n"
    "–ù–∞–ø–∏—à–∏ –µ—â—ë —Ä–∞–∑ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É"
)
def format_invalid_group():
    return INVALID_GROUP


BROADCAST = (
    "üîî | –•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∑–¥–µ—Å—å —Ä–∞—Å—Å—ã–ª–∫—É, –∫–æ–≥–¥–∞ —É –≥—Ä—É–ø–ø—ã –º–µ–Ω—è–µ—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?"
)
def format_broadcast():
    return BROADCAST


DO_PIN = (
    "üìå | –•–æ—á–µ—à—å —à–æ–± —è –∑–∞–∫—Ä–µ–ø–ª—è–ª —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è?"
)
def format_do_pin():
    return DO_PIN


RECOMMEND_PIN = (
    "üìå | –Ø –º–æ–≥—É –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, "
    "–Ω–æ —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤"
)
def format_recommend_pin():
    return RECOMMEND_PIN


PERMIT_PIN_VK = (
    "üöΩ | –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞—Ä–∫–µ–ø, –Ω–∞–∑–Ω–∞—á—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º, "
    "–ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –µ—Å–ª–∏ –ø–æ–µ–±–∞—Ç—å"
)
PERMIT_PIN_TG = (
    "üöΩ | –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫—Ä–µ–ø, –Ω–∞–∑–Ω–∞—á—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º —Å –ø—Ä–∞–≤–æ–º "
    "\"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\", –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –µ—Å–ª–∏ –ø–æ–µ–±–∞—Ç—å"
)
def format_permit_pin(src: common.MESSENGER_OR_EVT_SOURCE):
    if src == common.Source.VK:
        return PERMIT_PIN_VK
    if src == common.Source.TG:
        return PERMIT_PIN_TG


CANT_PIN_VK = (
    "‚ùå –ù–µ—Ç —É –º–µ–Ω—è –Ω–∏—Ö—É—è, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –º–æ—é –∞–¥–º–∏–Ω–∫—É"
)
CANT_PIN_TG = (
    "‚ùå –ù–µ—Ç —É –º–µ–Ω—è –Ω–∏—Ö—É—è, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –º–æ—ë –ø—Ä–∞–≤–æ \"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\""
)
def format_cant_pin(src: common.MESSENGER_OR_EVT_SOURCE):
    if src == common.Source.VK:
        return CANT_PIN_VK
    if src == common.Source.TG:
        return CANT_PIN_TG


RECOMMEND_ADDING_ZOOM = (
    "üìù | –¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏, ID, –ø–∞—Ä–æ–ª–∏ Zoom –∏ –∑–∞–º–µ—Ç–∫–∏, "
    "—á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
)
def format_recommend_adding_zoom():
    return RECOMMEND_ADDING_ZOOM


CHOOSE_ADDING_TYPE = (
    "üìù | –í—ã–±–µ—Ä–∏ –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å/–∑–∞–ø–∏—Å–∏"
)
def format_choose_adding_type():
    return CHOOSE_ADDING_TYPE


ZOOM_ADD_FROM_TEXT_EXPLAIN = (
    f"{Text.FROM_TEXT} - –ø–∏—à–µ—à—å –æ–¥–Ω–æ –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É, "
    f"–∞–≤—Ç–æ–º–∞—Ç–æ–º –±–µ—Ä—ë—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
)
def format_zoom_add_from_text_explain():
    return ZOOM_ADD_FROM_TEXT_EXPLAIN


ZOOM_ADD_MANUALLY_INIT_EXPLAIN = (
    f"{Text.MANUALLY} - –¥–æ–±–∞–≤–ª—è–µ—à—å, –∏–∑–º–µ–Ω—è–µ—à—å, —É–¥–∞–ª—è–µ—à—å "
    f"–ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏"
)
def format_zoom_add_manually_init_explain():
    return ZOOM_ADD_MANUALLY_INIT_EXPLAIN


ZOOM_ADD_MANUALLY_HUB_EXPLAIN = (
    f"{Text.MANUALLY} - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–º—è –≤—Ä—É—á–Ω—É—é"
)
def format_zoom_add_manually_hub_explain():
    return ZOOM_ADD_MANUALLY_HUB_EXPLAIN


SEND_ZOOM_DATA = (
    "üí¨ | –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ Zoom –ø–æ —Ñ–æ—Ä–º–∞—Ç—É"
)
def format_send_zoom_data():
    return SEND_ZOOM_DATA


ZOOM_DATA_FORMAT = (
    f"üìù | –§–æ—Ä–º–∞—Ç:\n"
    f"‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ {Key.NAME}: <–§–∞–º–∏–ª–∏—è> <–ò>.<–û>.\n"
    f"‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ {Key.URL}: <–°—Å—ã–ª–∫–∞>\n"
    f"‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ {Key.ID}: <ID>\n"
    f"‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ {'/'.join(Key.PWD)}: <–ö–æ–¥>\n"
    f"‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ {Key.NOTES}: <–õ—é–±–æ–π —Ç–µ–∫—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–≤–æ–π –º–∏–Ω–∏-—Ñ–∞–Ω—Ñ–∏–∫, —Å—Å—ã–ª—å –Ω–∞ —Ñ—É—Ä—Ä–∏ –ø–æ—Ä–Ω–æ –∏–ª–∏ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø–æ—á—Ç–∞ –∏ Google Drive>\n"
    f"‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ ..."
)
def format_zoom_data_format():
    return ZOOM_DATA_FORMAT


ZOOM_EXAMPLE = (
    "üîñ | –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
    "–∏–º—è: –ï–±–∞–Ω—å–∫–æ –•.–ô.\n"
    "—Å—Å—ã–ª–∫–∞: https://pornhub.com\n"
    "–ò–¥: 22813376969\n"
    "–ö–æ–¥: 0oChK0\n"
    "\n"
    "–∏–º—è: –ì–æ–≤–Ω–æ–≤–æ–∑ –ñ.\n"
    "–ò–¥: 22813376969\n"
    "–∑–∞–º–µ—Ç–∫–∏: –≤—ã–µ–±—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–∞—Ä–∞—Ö"
)
def format_zoom_example():
    return ZOOM_EXAMPLE


MASS_ZOOM_DATA_EXPLAIN = (
    "‚ùó –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤—å –ø—Ä–µ—Ñ–∏–∫—Å –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (\"–ò–º—è:\", \"—Å—Å—ã–ª–∫–∞:\", \"–ò–¥:\"), –º–æ–∂–Ω–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã\n"
    "üí° –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –≤ —Ä–∞–∑–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è"
)
def format_mass_zoom_data_explain():
    return MASS_ZOOM_DATA_EXPLAIN


DOESNT_CONTAIN_ZOOM = (
    f"‚ùå | Eblan? –ü–æ—Å–º–æ—Ç—Ä–∏ —Ñ–æ—Ä–º–∞—Ç, –ø–æ –Ω–µ–º—É —Ç—É—Ç –Ω–∏—Ö—É—è –Ω–µ—Ç ü§®\n"
    f"‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ ü§î –ë–ª–æ–∫–∏ –±–µ–∑ –§–ò–û –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è\n"
    f"‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ ü§î –ò–º–µ–Ω–∞ –±–æ–ª—å—à–µ {zoom.NAME_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è"
)
def format_doesnt_contain_zoom():
    return DOESNT_CONTAIN_ZOOM


YOU_CAN_ADD_MORE = (
    "ü§ì | –¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ, "
    "–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ—â—ë –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏"
)
def format_you_can_add_more():
    return YOU_CAN_ADD_MORE


VALUE_TOO_BIG = (
    "‚ùå | –î–∞ —è –Ω–µ –ø—Ä–æ –¥–ª–∏–Ω—É —Ö—É—è –≤ —Ç–≤–æ–µ–π –∂–æ–ø–µ, —Å–æ–∫—Ä–∞—Ç–∏ –¥–æ {limit} —Å–∏–º–≤–æ–ª–æ–≤"
)
def format_value_too_big(limit: int):
    return VALUE_TOO_BIG.format(limit=limit)


ENTER_NAME = (
    "üê∑ | –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∏–º—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ üëâ –ù–∞–ø—Ä–∏–º–µ—Ä: –ï–±–∞–Ω—å–∫–æ –•.–ô., –ï–±–∞–Ω—å–∫–æ –•."
)
def format_enter_name():
    return ENTER_NAME


NAME_IN_DATABASE = (
    "‚ùå | –≠—Ç–æ –∏–º—è —É–∂–µ –≤ –±–∞Z–µ"
)
def format_name_in_database():
    return NAME_IN_DATABASE


ENTER_URL = (
    "üåê | –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ üëâ –ù–∞–ø—Ä–∏–º–µ—Ä: https://us04web.zoom.us/j/2281337300?pwd=p0s0siMOEpotn0e0CHKOmudilaEBANYA"
)
def format_enter_url():
    return ENTER_URL


ENTER_ID = (
    "üìç | –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π ID –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ üëâ –ù–∞–ø—Ä–∏–º–µ—Ä: 2281337300"
)
def format_enter_id():
    return ENTER_ID


ENTER_PWD = (
    "üîë | –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ üëâ –ù–∞–ø—Ä–∏–º–µ—Ä: 0oChKo –∏–ª–∏ –¥—Ä."
)
def format_enter_pwd():
    return ENTER_PWD

ENTER_NOTES = (
    "üìù | –û—Ç–ø—Ä–∞–≤—å –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ üëâ –ù–∞–ø—Ä–∏–º–µ—Ä: —Ç–≤–æ–π –º–∏–Ω–∏-—Ñ–∞–Ω—Ñ–∏–∫, —Å—Å—ã–ª—å –Ω–∞ —Ñ—É—Ä—Ä–∏ –ø–æ—Ä–Ω–æ –∏–ª–∏ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø–æ—á—Ç–∞ –∏ Google Drive"
)
def format_enter_notes():
    return ENTER_NOTES


WILL_BE_ADDED = (
    "‚ùá –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ: {count}"
)
def format_will_be_added(count: int):
    return WILL_BE_ADDED.format(
        count = count,
    )


WILL_BE_OVERWRITTEN = (
    "‚ôª –ë—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ: {count}"
)
def format_will_be_overwritten(count: int):
    return WILL_BE_OVERWRITTEN.format(
        count = count,
    )


def format_zoom_mass_adding_overview(
    adding: zoom.Entries, 
    overwriting: zoom.Entries
):

    sections: list[str] = []

    if len(adding) > 0:
        entries = common.text.indent(adding.format_compact())
        text = format_will_be_added(len(adding))
        text += "\n"
        text += entries

        sections.append(text)
    
    if len(overwriting) > 0:
        entries = common.text.indent(overwriting.format_compact())
        text = format_will_be_overwritten(len(overwriting))
        text += "\n"
        text += entries

        sections.append(text)

    return "\n".join(sections)


DUMP_EXPLAIN = (
    f"üíæ | –¢—ã –º–æ–∂–µ—à—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–¥–µ—Å—å –∑–∞–ø–∏—Å–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥ "
    f"–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –¥—Ä—É–≥–æ–º –¥–∏–∞–ª–æ–≥–µ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é {Text.FROM_TEXT}\n\n"
    f"üí° | –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n\n"
    f"üëá | –ù–∞–∂–∏–º–∞–π {Text.DUMP} —á—Ç–æ–±—ã –∑–∞—Å—Ä–∞—Ç—å –±–µ—Å–µ–¥—É"
)
def format_dump_explain():
    return DUMP_EXPLAIN


FINISH = (
    f"üëç | –§–ø—Ä–∏–Ω—Ü–∏–ø–∏ —Ñ—Å—ë, –º–æ–∂–µ—à—å –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–∞—Ç—å {Text.FINISH}"
)
def format_finish():
    return FINISH


GROUP_SETTING_EXPLAIN = (
    f"{Text.GROUP} - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã, —Å –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–≥—Ä"
)
BROADCAST_SETTING_EXPLAIN = (
    f"{Text.BROADCAST} - –ø–æ–ª—É—á–∏—à—å –ª–∏ —Ç—ã –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"
)
PIN_SETTING_EXPLAIN = (
    f"{Text.PIN} - –∑–∞–∫—Ä–µ–ø–∏—Ç –ª–∏ –Ω–µ–≥—Ä —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
)
ZOOM_SETTING_EXPLAIN = (
    f"{Text.ZOOM} - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–æ–≤: –∏—Ö –∏–º–µ–Ω–∞, —Å—Å—ã–ª–∫–∏, ID, –ø–∞—Ä–æ–ª–∏ –∏ –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
)
RESET_SETTING_EXPLAIN = (
    f"{Text.RESET} - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∞—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É"
)
def format_settings_main(is_group_chat: bool) -> str:
    text = ""

    text += f"{GROUP_SETTING_EXPLAIN}\n"
    text += "\n"
    text += f"{BROADCAST_SETTING_EXPLAIN}\n"
    text += "\n"
    if is_group_chat:
        text += f"{PIN_SETTING_EXPLAIN}\n"
        text += "\n" 
    text += f"{ZOOM_SETTING_EXPLAIN}\n"
    text += "\n"
    text += f"{RESET_SETTING_EXPLAIN}\n"

    return text


RESET_EXPLAIN = (
    f"üóëÔ∏è | –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ + Zoom –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–π—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É\n\n"
    f"üëá | –ù–∞–∂–∏–º–∞–π {Text.RESET} —á—Ç–æ–±—ã —É —Ç–µ–±—è —Ç–æ–∂–µ –±—ã–ª–∞ –±–æ–ª–µ–∑–Ω—å –ê–ª—å—Ü–≥–µ–π–º–µ—Ä–∞"
)
def format_reset_explain() -> str:
    return RESET_EXPLAIN


NO_SCHEDULE = (
    f"ü§î –¢–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ —ç—Ç–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
)
def format_no_schedule() -> str:
    return NO_SCHEDULE


SCHEDULE_FOOTER = (
    "‚è± –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update}\n"
    "‚úâ –ü–µ—Ä–∏–æ–¥ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_period} –º–∏–Ω"
)
def format_schedule_footer(last_update: Any, update_period: Any) -> str:
    return SCHEDULE_FOOTER.format(
        last_update=last_update,
        update_period=update_period
    )


NO_UPDATES = (
    "ü§î –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
)
def format_no_updates():
    return NO_UPDATES

UPDATES_SENT = (
    "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"
)
def format_updates_sent():
    return UPDATES_SENT

UPDATES_TIMEOUT = (
    "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
)
def format_updates_timeout():
    return UPDATES_TIMEOUT


TOO_FAST_RETRY_AFTER = (
    "–õ–µ–µ –∫—É–¥–∞ —Ç–æ—Ä–æ–ø–∏—à—å—Å—è, –ø–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ {secs}"
)
def format_too_fast_retry_after(secs: int):
    fmt_secs = f"{secs} —Å."

    return TOO_FAST_RETRY_AFTER.format(
        secs = fmt_secs
    )


NOT_IMPLEMENTED_ERROR = (
    "ü§î –§—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞"
)
def format_not_implemented_error() -> str:
    return NOT_IMPLEMENTED_ERROR


GROUP_CHANGED_IN_SC_TYPE = (
    "–ì—Ä—É–ø–ø–∞ {change} –≤ {sc_type}"
)
def format_group_changed_in_sc_type(
    change: compare.ChangeType,
    sc_type: schedule.Type
):
    if change == compare.ChangeType.APPEARED:
        repr_change = "–ø–æ—è–≤–∏–ª–∞—Å—å"
    elif change == compare.ChangeType.CHANGED:
        repr_change = "–∏–∑–º–µ–Ω–∏–ª–∞—Å—å"

    if sc_type == schedule.Type.DAILY:
        repr_sc_type = "–¥–Ω–µ–≤–Ω–æ–º"
    elif sc_type == schedule.Type.WEEKLY:
        repr_sc_type = "–Ω–µ–¥–µ–ª—å–Ω–æ–º"
    
    return GROUP_CHANGED_IN_SC_TYPE.format(
        change  = repr_change,
        sc_type = repr_sc_type
    )


REPLIED_TO_SCHEDULE_MESSAGE = (
    "üëÜ –ü–æ—Å–ª–µ–¥–Ω–µ–µ {sc_type} –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"
)
def format_replied_to_schedule_message(sc_type: schedule.TYPE_LITERAL):
    if sc_type == schedule.Type.DAILY:
        repr_sc_type = "–¥–Ω–µ–≤–Ω–æ–µ"
    elif sc_type == schedule.Type.WEEKLY:
        repr_sc_type = "–Ω–µ–¥–µ–ª—å–Ω–æ–µ"

    return REPLIED_TO_SCHEDULE_MESSAGE.format(
        sc_type = repr_sc_type
    )


FAILED_REPLY_TO_SCHEDULE_MESSAGE = (
    "ü•∫ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ {sc_type} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, "
    f"–Ω–∞—Ö–æ–¥–∏ –µ–≥–æ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É {Text.RESEND}"
)
def format_failed_reply_to_schedule_message(sc_type: schedule.TYPE_LITERAL):
    if sc_type == schedule.Type.DAILY:
        repr_sc_type = "–¥–Ω–µ–≤–Ω–æ–µ"
    elif sc_type == schedule.Type.WEEKLY:
        repr_sc_type = "–Ω–µ–¥–µ–ª—å–Ω–æ–µ"

    return FAILED_REPLY_TO_SCHEDULE_MESSAGE.format(
        sc_type = repr_sc_type
    )

DETAILED_COMPARE_NOT_SHOWN = (
    "(–∏–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–∞—Ç–∞, –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥ ‚Ä¢ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω—ã)"
)
def format_detailed_compare_not_shown():
    return DETAILED_COMPARE_NOT_SHOWN