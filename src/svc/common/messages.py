from __future__ import annotations
from typing import Optional

from src.svc.common import MESSENGER_SOURCE, CommonEverything, Source, error
from src.svc.common.states import State


DEBUGGING = True


class Builder:
    def __init__(
        self, 
        separator: str = "\n\n", 
        everything: Optional[CommonEverything] = None
    ) -> None:
        self.separator = separator
        self.components: list[str] = []
        self.everything = everything


        if DEBUGGING and everything is None:
            raise error.NoEverythingWithDebugOn((
                "debug is on, but there's no way "
                "of displaying debug info without "
                "CommonEverything"
            ))
    
    def add(self, text: str) -> Builder:
        if text == "":
            return self

        self.components.append(text)
        return self
    
    def debug(self, everything: CommonEverything):
        """
        ## Generate debug info
        """

        trace = everything.navigator.trace
        debug_info = format_debug(trace)

        return debug_info

    def make(self) -> str:
        if DEBUGGING:
            self.components = [self.debug(self.everything)] + self.components

        return self.separator.join(self.components)


#### Common footers and headers ####

DEBUG = (
    "c==3 trace:\n"
    "{trace}"
)
def format_debug(trace: list[State]):
    trace_str = "\n".join([state.anchor for state in trace])

    return DEBUG.format(trace=trace_str)


PRESS_BEGIN = (
    "üëá –ù–∞–∂–∏–º–∞–π \"–ù–∞—á–∞—Ç—å\", —Ö—É–ª–µ"
)
def format_press_begin():
    return PRESS_BEGIN


GROUPS = (
    "üñï | –ì—Ä—É–ø–ø—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ {groups}"
)
def format_groups(groups: list[str]):
    groups_str = ", ".join(groups)
    return GROUPS.format(groups=groups_str)


MENTION_ME = (
    "üòÆ –ü–∏—à–∏, —É–ø–æ–º–∏–Ω–∞—è –º–µ–Ω—è: {mention}, –∏–Ω–∞—á–µ –Ω–µ —É–≤–∏–∂—É üòÆ"
)
def format_mention_me(mention: str):
    return MENTION_ME.format(mention=mention)


REPLY_TO_ME = (
    "üòÆ –ü–∏—à–∏, –æ—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –Ω–µ —É–≤–∏–∂—É üòÆ"
)
def format_reply_to_me():
    return REPLY_TO_ME


CHAT_WILL_MIGRATE = (
    "ü§î –ò–∑-–∑–∞ —ç—Ç–æ–≥–æ, —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ —Å—Ç–∞–Ω–µ—Ç —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π ü§î\n"
    "–ß–∏—Ç–∞–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∑–¥–µ—Å—å: https://teleme.io/articles/turn_a_telegram_group_into_a_supergroup?hl=ru"
)
def format_chat_will_migrate():
    return CHAT_WILL_MIGRATE


#### Full messages for specific states ####

WELCOME =  (
    "üòµüòµüòµ –ê–∞–∞–∞ —è –Ω–µ–≥—Ä üë®üèøüë®üèø –∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞, "
    "—Ç–µ–ø–µ—Ä—å –º–Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è –ø–∏–∑–¥–∏—Ç—å "
    "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å üåê ktmu-sutd.ru üåê "
    "—á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å—Å—è —Å {count} üòî..."
)
def format_welcome(is_group_chat: bool):
    if is_group_chat:
        return WELCOME.format(count="–≤–∞–º–∏")
    else:
        return WELCOME.format(count="—Ç–æ–±–æ–π")


GROUP_INPUT = (
    "üíÖ | –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ –§–æ—Ä–º–∞—Ç: 1–∫–¥–¥69, 1-–∫–¥–¥-69, 1–ö–î–î69, 1-–ö–î–î-69\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç—É, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ"
)
def format_group_input():
    return GROUP_INPUT


UNKNOWN_GROUP = (
    "‚ùì | {group} –ø–æ–∫–∞ –Ω–µ—Ç, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å?"
)
def format_unknown_group(group: str):
    return UNKNOWN_GROUP.format(group=group)


INVALID_GROUP = (
    "‚ùå | –≠—Ç–∞ —Ö—É–π–Ω—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç: 1–∫–¥–¥69, 1-–∫–¥–¥-69, 1–ö–î–î69, 1-–ö–î–î-69\n"
    "–ù–∞–ø–∏—à–∏ –µ—â—ë —Ä–∞–∑ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É"
)
def format_invalid_group():
    return INVALID_GROUP


SCHEDULE_BROADCAST = (
    "üîî | –•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∑–¥–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è?"
)
def format_schedule_broadcast():
    return SCHEDULE_BROADCAST


DO_PIN = (
    "üìå | –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ, —Ö–æ—á–µ—à—å —à–æ–± —è –∑–∞–∫—Ä–µ–ø–ª—è–ª —ç—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è?"
)
def format_do_pin():
    return DO_PIN


RECOMMEND_PIN = (
    "üìå | –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ, —è –º–æ–≥—É –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å —ç—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, "
    "–Ω–æ —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤"
)
def format_recommend_pin():
    return RECOMMEND_PIN


PERMIT_PIN_VK = (
    "üöΩ | –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞—Ä–∫–µ–ø, –Ω–∞–∑–Ω–∞—á—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º, "
    "–ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –µ—Å–ª–∏ –ø–æ–µ–±–∞—Ç—å"
)
PERMIT_PIN_TG = (
    "üöΩ | –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫—Ä–µ–ø, –Ω–∞–∑–Ω–∞—á—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º —Å –ø—Ä–∞–≤–æ–º "
    "\"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\", –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –µ—Å–ª–∏ –ø–æ–µ–±–∞—Ç—å"
)
def format_permit_pin(src: MESSENGER_SOURCE):
    if src == Source.VK:
        return PERMIT_PIN_VK
    if src == Source.TG:
        return PERMIT_PIN_TG


CANT_PIN_VK = (
    "–ù–µ—Ç —É –º–µ–Ω—è –Ω–∏—Ö—É—è, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –º–æ—é –∞–¥–º–∏–Ω–∫—É"
)
CANT_PIN_TG = (
    "–ù–µ—Ç —É –º–µ–Ω—è –Ω–∏—Ö—É—è, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –º–æ—ë –ø—Ä–∞–≤–æ \"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\""
)
def format_cant_pin(src: MESSENGER_SOURCE):
    if src == Source.VK:
        return CANT_PIN_VK
    if src == Source.TG:
        return CANT_PIN_TG


FINISH = (
    "–§–ø—Ä–∏–Ω—Ü–∏–ø–∏ —Ñ—Å—ë, –º–æ–∂–µ—à—å –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–∞—Ç—å \"–ó–∞–∫–æ–Ω—á–∏—Ç—å\""
)
def format_finish():
    return FINISH


if __name__ == "__main__":
    #print(format_group(groups="mommy", should_mention=True, mention="@mommy", should_reply=False))
    print(format_invalid_group("mommy"))