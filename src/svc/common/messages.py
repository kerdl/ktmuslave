from __future__ import annotations
from typing import Any
from src.data.settings import Settings

from src.svc import common
from src.data import zoom
from src.svc.common.states import State
from src.svc.common.keyboard import Text


DEBUGGING = False


class Builder:
    def __init__(
        self, 
        separator: str = "\n\n",
    ) -> None:
        self.separator = separator
        self.components: list[str] = []
    
    def add(self, text: str) -> Builder:
        if text == "":
            return self

        self.components.append(text)
        return self
    
    def add_if(self, text: str, condition: bool):
        if condition:
            self.add(text)
        
        return self

    def make(self) -> str:
        return self.separator.join(self.components)


PYTHON_VALUE_REPR = {
    True:  "–¥–∞",
    False: "–Ω–µ—Ç",
    None:  "–Ω/–∞"
}

def value_repr(value: Any) -> str:
    if type(value) == int:
        return value

    return PYTHON_VALUE_REPR.get(value) or value


#### Common footers and headers ####

def default_footer_addition(everything: common.CommonEverything):
    """
    # Notice about bot mentioning

    ## Why
    - we filter anything that is not for us
    - so we should ask user to reply
    or mention the bot
    """

    from src import defs

    mention = ""
    footer_addition = ""

    if everything.is_group_chat:

        if everything.is_from_vk:
            mention = defs.vk_bot_mention
            footer_addition = format_mention_me(mention)

        elif everything.is_from_tg:
            footer_addition = format_reply_to_me()
    
    return footer_addition

DEBUG = (
    "8==oü§Æ trace:\n"
    "{trace}\n"
    "8==oü§Æ back_trace:\n"
    "{back_trace}\n"
    "8==oü§Æ last_bot_message:\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ{last_bot_message}\n"
    "8==oü§Æ settings:\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ{settings}"
)
def format_debug(trace: list[State], back_trace: list[State], last_bot_message: common.CommonBotMessage, settings: Settings):
    
    def fmt_trace(trace: list[State]):
        return "\n".join([f"‚ÄÄ‚ÄÄ‚ÄÄ{state.space}:{state.anchor}" for state in trace])
    
    trace_str = fmt_trace(trace)
    back_trace_str = fmt_trace(back_trace)

    last_bot_message = "–≤–ø–∏–∑–¥—É —ç—Ç–æ—Ç –º–µ—Å—Å–∞–¥–∂ –æ–Ω –æ–≥—Ä–æ–º–Ω—ã–π –∫–∞–∫ —á–ª–µ–Ω —É –º–µ–Ω—è –≤ –∂–æ–ø–µ"
    settings         = "–ø–æ—Ö—É–π"

    return DEBUG.format(
        trace            = trace_str,
        back_trace       = back_trace_str,
        last_bot_message = last_bot_message,
        settings         = settings
    )


CANT_PRESS_OLD_BUTTONS = (
    "–ü–æ—Å–æ—Å–∏ üòí –í–æ—Ç —Ç–µ–±–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
    "–Ω–∞ –Ω—ë–º –∏ —Ç—ã–∫–∞–π –∫—É–¥–∞ —Ç–µ–±–µ –Ω–∞–¥–æ"
)
def format_cant_press_old_buttons():
    return CANT_PRESS_OLD_BUTTONS


EMPTY_PAGE = (
    "ü§î | –ü–æ–∫–∞ —Å—é–¥–∞ –Ω–∏—Ö—É—è –Ω–µ –∑–∞–≤–µ–∑–ª–∏"
)
def format_empty_page():
    return EMPTY_PAGE


PRESS_BEGIN = (
    f"üëá –ù–∞–∂–∏–º–∞–π {Text.BEGIN}, —Ö—É–ª–µ"
)
def format_press_begin():
    return PRESS_BEGIN


GROUPS = (
    "üñï | –ì—Ä—É–ø–ø—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ {groups}"
)
def format_groups(groups: list[str]):
    groups_str = ", ".join(groups)
    return GROUPS.format(groups=groups_str)


MENTION_ME = (
    "üòÆ –ï—â—ë —É–ø–æ–º—è–Ω–∏ –º–µ–Ω—è: {mention}, –∏–Ω–∞—á–µ –Ω–µ —É–≤–∏–∂—É üòÆ"
)
def format_mention_me(mention: str):
    return MENTION_ME.format(mention=mention)


REPLY_TO_ME = (
    "üòÆ –ï—â—ë ‚Ü©Ô∏è –æ—Ç–≤–µ—Ç—å ‚Ü©Ô∏è –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –Ω–µ —É–≤–∏–∂—É üòÆ"
)
def format_reply_to_me():
    return REPLY_TO_ME


CHAT_WILL_MIGRATE = (
    "ü§î –ò–∑-–∑–∞ —ç—Ç–æ–≥–æ, —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ —Å—Ç–∞–Ω–µ—Ç —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π ü§î\n"
    "–ß–∏—Ç–∞–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∑–¥–µ—Å—å: https://teleme.io/articles/turn_a_telegram_group_into_a_supergroup?hl=ru"
)
def format_chat_will_migrate():
    return CHAT_WILL_MIGRATE


PAGE_NUM = (
    "üìÑ | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current}/{last}"
)
def format_page_num(current: int, last: int):
    return PAGE_NUM.format(current=current, last=last)


PRESS_BUTTONS_TO_CHANGE = (
    "üëá | –ù–∞–∂–º–∏ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä, —á—Ç–æ–±—ã –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å"
)
def format_press_buttons_to_change():
    return PRESS_BUTTONS_TO_CHANGE


NO_TEXT = (
    "‚ùå | –ù—É —Ç—ã –±—ã–¥–ª–æ, —Ç—É—Ç –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞"
)
def format_no_text():
    return NO_TEXT


CURRENT_VALUE = (
    "üìù | –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}"
)
def format_current_value(value: Any):
    return CURRENT_VALUE.format(
        value = value_repr(value)
    )


#### Full messages for specific states ####

WELCOME =  (
    "üë®üèø –ë—É–¥—É –ø–∏–∑–¥–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ "
    "—Å üåê ktmu-sutd.ru üåê "
    "–∏ –¥–µ–ª–∏—Ç—å—Å—è —Å {count}"
)
def format_welcome(is_group_chat: bool):
    if is_group_chat:
        return WELCOME.format(count="–≤–∞–º–∏")
    else:
        return WELCOME.format(count="—Ç–æ–±–æ–π")


GROUP_INPUT = (
    "üíÖ | –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ –§–æ—Ä–º–∞—Ç: 1–∫–¥–¥69, 1-–∫–¥–¥-69, 1–ö–î–î69, 1-–ö–î–î-69\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç—É, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ"
)
def format_group_input():
    return GROUP_INPUT


UNKNOWN_GROUP = (
    "‚ùì | {group} –ø–æ–∫–∞ –Ω–µ—Ç, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å?"
)
def format_unknown_group(group: str):
    return UNKNOWN_GROUP.format(group=group)


INVALID_GROUP = (
    "‚ùå | –≠—Ç–∞ —Ö—É–π–Ω—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç: 1–∫–¥–¥69, 1-–∫–¥–¥-69, 1–ö–î–î69, 1-–ö–î–î-69\n"
    "–ù–∞–ø–∏—à–∏ –µ—â—ë —Ä–∞–∑ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É"
)
def format_invalid_group():
    return INVALID_GROUP


BROADCAST = (
    "üîî | –•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∑–¥–µ—Å—å —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è?"
)
def format_broadcast():
    return BROADCAST


DO_PIN = (
    "üìå | –•–æ—á–µ—à—å —à–æ–± —è –∑–∞–∫—Ä–µ–ø–ª—è–ª —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è?"
)
def format_do_pin():
    return DO_PIN


RECOMMEND_PIN = (
    "üìå | –Ø –º–æ–≥—É –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, "
    "–Ω–æ —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤"
)
def format_recommend_pin():
    return RECOMMEND_PIN


PERMIT_PIN_VK = (
    "üöΩ | –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞—Ä–∫–µ–ø, –Ω–∞–∑–Ω–∞—á—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º, "
    "–ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –µ—Å–ª–∏ –ø–æ–µ–±–∞—Ç—å"
)
PERMIT_PIN_TG = (
    "üöΩ | –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫—Ä–µ–ø, –Ω–∞–∑–Ω–∞—á—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º —Å –ø—Ä–∞–≤–æ–º "
    "\"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\", –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –µ—Å–ª–∏ –ø–æ–µ–±–∞—Ç—å"
)
def format_permit_pin(src: common.MESSENGER_SOURCE):
    if src == common.Source.VK:
        return PERMIT_PIN_VK
    if src == common.Source.TG:
        return PERMIT_PIN_TG


CANT_PIN_VK = (
    "–ù–µ—Ç —É –º–µ–Ω—è –Ω–∏—Ö—É—è, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –º–æ—é –∞–¥–º–∏–Ω–∫—É"
)
CANT_PIN_TG = (
    "–ù–µ—Ç —É –º–µ–Ω—è –Ω–∏—Ö—É—è, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –º–æ—ë –ø—Ä–∞–≤–æ \"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\""
)
def format_cant_pin(src: common.MESSENGER_SOURCE):
    if src == common.Source.VK:
        return CANT_PIN_VK
    if src == common.Source.TG:
        return CANT_PIN_TG


RECOMMEND_ADDING_ZOOM = (
    "üìù | –¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏, ID, –ø–∞—Ä–æ–ª–∏ Zoom, "
    "—á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
)
def format_recommend_adding_zoom():
    return RECOMMEND_ADDING_ZOOM


ZOOM_ADDING_TYPES_EXPLAIN = (
    f"{Text.FROM_TEXT} - –ø–µ—Ä–µ—Å—ã–ª–∞–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–∞–º–∏, "
    f"–∞–≤—Ç–æ–º–∞—Ç–æ–º –±–µ—Ä—ë—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
    f"{Text.MANUALLY} - –¥–æ–±–∞–≤–ª—è–µ—à—å, –∏–∑–º–µ–Ω—è–µ—à—å, —É–¥–∞–ª—è–µ—à—å "
    f"–ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏"
)
def format_zoom_adding_types_explain():
    return ZOOM_ADDING_TYPES_EXPLAIN


FORWARD_ZOOM_DATA = (
    "üí¨ | –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ Zoom"
)
SEND_ZOOM_DATA = (
    "üí¨ | –°–∫–æ–ø–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ Zoom "
    "–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ"
)
def format_send_zoom_data(src: common.MESSENGER_SOURCE, is_group_chat: bool):
    if (src == common.Source.VK) or (src == common.Source.TG and not is_group_chat):
        return FORWARD_ZOOM_DATA
    else:
        return SEND_ZOOM_DATA


ZOOM_DATA_FORMAT = (
    "üìù | –§–æ—Ä–º–∞—Ç:\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ <–§–∞–º–∏–ª–∏—è> <–ò–º—è> <–û—Ç—á–µ—Å—Ç–≤–æ> [–ò–õ–ò] <–§–∞–º–∏–ª–∏—è> <–ò>.<–û>.\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ <–°—Å—ã–ª–∫–∞>\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ <ID>\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ <–ü–∞—Ä–æ–ª—å>\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ [–ü–£–°–¢–ê–Ø –°–¢–†–û–ö–ê]\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ ..."
)
def format_zoom_data_format():
    return ZOOM_DATA_FORMAT


DOESNT_CONTAIN_ZOOM = (
    "‚ùå | Eblan? –ü–æ—Å–º–æ—Ç—Ä–∏ —Ñ–æ—Ä–º–∞—Ç, –ø–æ –Ω–µ–º—É —Ç—É—Ç –Ω–∏—Ö—É—è –Ω–µ—Ç ü§®\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ ü§î –ë–ª–æ–∫–∏ –±–µ–∑ –§–ò–û –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è"
)
def format_doesnt_contain_zoom():
    return DOESNT_CONTAIN_ZOOM


YOU_CAN_ADD_MORE = (
    "ü§ì | –¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ, "
    "–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ—â—ë –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏"
)
def format_you_can_add_more():
    return YOU_CAN_ADD_MORE


ENTER_NAME = (
    "üê∑ | –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∏–º—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ üëâ –ù–∞–ø—Ä–∏–º–µ—Ä: –ï–±–∞–Ω—å–∫–æ –•.–ô., –ï–±–∞–Ω—å–∫–æ –•."
)
def format_enter_name():
    return ENTER_NAME


NAME_IN_DATABASE = (
    "‚ùå | –≠—Ç–æ –∏–º—è —É–∂–µ –≤ –±–∞Z–µ"
)
def format_name_in_database():
    return NAME_IN_DATABASE


ENTER_URL = (
    "üåê | –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ üëâ –ù–∞–ø—Ä–∏–º–µ—Ä: https://us04web.zoom.us/j/2281337300?pwd=p0s0siMOEpotn0e0CHKOmudilaEBANYA"
)
def format_enter_url():
    return ENTER_URL


ENTER_ID = (
    "üìç | –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π ID –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ üëâ –ù–∞–ø—Ä–∏–º–µ—Ä: 2281337300"
)
def format_enter_id():
    return ENTER_ID


ENTER_PWD = (
    "üîë | –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ üëâ –ù–∞–ø—Ä–∏–º–µ—Ä: 0oChKo –∏–ª–∏ –¥—Ä."
)
def format_enter_pwd():
    return ENTER_PWD


WILL_BE_ADDED = (
    "‚ùá –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ: {count}"
)
def format_will_be_added(count: int):
    return WILL_BE_ADDED.format(
        count = count,
    )


WILL_BE_OVERWRITTEN = (
    "‚ôª –ë—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ: {count}"
)
def format_will_be_overwritten(count: int):
    return WILL_BE_OVERWRITTEN.format(
        count = count,
    )


def format_zoom_mass_adding_overview(
    adding: zoom.Entries, 
    overwriting: zoom.Entries
):

    sections: list[str] = []

    if len(adding) > 0:
        entries = common.text.indent(adding.format_compact())
        text = format_will_be_added(len(adding))
        text += "\n"
        text += entries

        sections.append(text)
    
    if len(overwriting) > 0:
        entries = common.text.indent(overwriting.format_compact())
        text = format_will_be_overwritten(len(overwriting))
        text += "\n"
        text += entries

        sections.append(text)

    return "\n".join(sections)


ZOOM_DATA_WARNING = (
    "‚ùó | –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã —É –ø—Ä–µ–ø–æ–¥–æ–≤ –±—ã–ª–∏ "
    "—Ç–æ—á–Ω–æ —Ç–∞–∫–∏–µ –∂–µ –∏–º–µ–Ω–∞, –∫–∞–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ ktmu-sutd.ru\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ ‚ùå | –ï–±–∞–Ω—å–∫–æ –•—É–π–ª–æ–≤–∏–∫ –ô–æ–±–∞\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ ‚úÖ | –ï–±–∞–Ω—å–∫–æ –•.–ô.\n"
    "‚ùó | –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–ª—É—á–∞–π–Ω–æ "
    "–Ω–µ –±—ã–ª–∏ –æ–±—Ä–µ–∑–∞–Ω—ã (–µ–≤—Ä–µ–π—Å–∫–∞—è –¥—Ä–µ–≤–Ω—è—è –ø–æ—Å–ª–æ–≤–∏—Ü–∞)\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ ‚ùå | posos.us/p0lizhiM0E...\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ ‚úÖ | posos.us/p0lizhiM0Epotn0eOCHK0"
)
def format_zoom_data_warning():
    return ZOOM_DATA_WARNING


FINISH = (
    f"üëç | –§–ø—Ä–∏–Ω—Ü–∏–ø–∏ —Ñ—Å—ë, –º–æ–∂–µ—à—å –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–∞—Ç—å {Text.FINISH}"
)
def format_finish():
    return FINISH


NO_UPDATES = (
    "ü§î –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
)
def format_no_updates():
    return NO_UPDATES

UPDATES_SENT = (
    "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"
)

def format_updates_sent():
    return UPDATES_SENT


TOO_FAST_RETRY_AFTER = (
    "–õ–µ–µ –∫—É–¥–∞ —Ç–æ—Ä–æ–ø–∏—à—å—Å—è, –ø–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ {secs}"
)
def format_too_fast_retry_after(secs: int):
    fmt_secs = f"{secs} —Å."

    return TOO_FAST_RETRY_AFTER.format(
        secs = fmt_secs
    )