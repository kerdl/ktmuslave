from __future__ import annotations
from typing import Optional
from src.data.settings import Settings

from src.svc import common
from src.svc.common.states import State
from src.svc.common.keyboard import Text


DEBUGGING = False


class Builder:
    def __init__(
        self, 
        separator: str = "\n\n",
    ) -> None:
        self.separator = separator
        self.components: list[str] = []
    
    def add(self, text: str) -> Builder:
        if text == "":
            return self

        self.components.append(text)
        return self
    
    def add_if(self, text: str, condition: bool):
        if condition:
            self.add(text)
        
        return self

    def make(self) -> str:
        return self.separator.join(self.components)


#### Common footers and headers ####

def default_footer_addition(everything: common.CommonEverything):
    from src import defs

    mention = ""
    footer_addition = ""

    if everything.is_group_chat:
        if everything.is_from_vk:
            mention = defs.vk_bot_mention
            footer_addition = format_mention_me(mention)
        elif everything.is_from_tg:
            footer_addition = format_reply_to_me()
    
    return footer_addition

DEBUG = (
    "8==oü§Æ trace:\n"
    "{trace}\n"
    "8==oü§Æ back_trace:\n"
    "{back_trace}\n"
    "8==oü§Æ last_bot_message:\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ{last_bot_message}\n"
    "8==oü§Æ settings:\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ{settings}"
)
def format_debug(trace: list[State], back_trace: list[State], last_bot_message: common.CommonBotMessage, settings: Settings):
    
    def fmt_trace(trace: list[State]):
        return "\n".join([f"‚ÄÄ‚ÄÄ‚ÄÄ{state.space}:{state.anchor}" for state in trace])
    
    trace_str = fmt_trace(trace)
    back_trace_str = fmt_trace(back_trace)

    last_bot_message = "–≤–ø–∏–∑–¥—É —ç—Ç–æ—Ç –º–µ—Å—Å–∞–¥–∂ –æ–Ω –æ–≥—Ä–æ–º–Ω—ã–π –∫–∞–∫ —á–ª–µ–Ω —É –º–µ–Ω—è –≤ –∂–æ–ø–µ"

    return DEBUG.format(
        trace            = trace_str,
        back_trace       = back_trace_str,
        last_bot_message = last_bot_message,
        settings         = settings
    )


CANT_PRESS_OLD_BUTTONS = (
    "—ã–∞—ã–∞—ã–∞ –Ω–∏–∑—è —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∞—á–∫–∏ –∂–∞—Ç—å ü§™ü§™ü§™"
)
def format_cant_press_old_buttons():
    return CANT_PRESS_OLD_BUTTONS


PRESS_BEGIN = (
    f"üëá –ù–∞–∂–∏–º–∞–π {Text.BEGIN}, —Ö—É–ª–µ"
)
def format_press_begin():
    return PRESS_BEGIN


GROUPS = (
    "üñï | –ì—Ä—É–ø–ø—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ {groups}"
)
def format_groups(groups: list[str]):
    groups_str = ", ".join(groups)
    return GROUPS.format(groups=groups_str)


MENTION_ME = (
    "üòÆ –ï—â—ë —É–ø–æ–º—è–Ω–∏ –º–µ–Ω—è: {mention}, –∏–Ω–∞—á–µ –Ω–µ —É–≤–∏–∂—É üòÆ"
)
def format_mention_me(mention: str):
    return MENTION_ME.format(mention=mention)


REPLY_TO_ME = (
    "üòÆ –ï—â—ë ‚Ü©Ô∏è –æ—Ç–≤–µ—Ç—å ‚Ü©Ô∏è –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –Ω–µ —É–≤–∏–∂—É üòÆ"
)
def format_reply_to_me():
    return REPLY_TO_ME


CHAT_WILL_MIGRATE = (
    "ü§î –ò–∑-–∑–∞ —ç—Ç–æ–≥–æ, —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ —Å—Ç–∞–Ω–µ—Ç —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π ü§î\n"
    "–ß–∏—Ç–∞–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∑–¥–µ—Å—å: https://teleme.io/articles/turn_a_telegram_group_into_a_supergroup?hl=ru"
)
def format_chat_will_migrate():
    return CHAT_WILL_MIGRATE

PAGE_NUM = (
    "üìÑ | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current}/{last}"
)
def format_page_num(current: int, last: int):
    return PAGE_NUM.format(current=current, last=last)


#### Full messages for specific states ####

WELCOME =  (
    "üë®üèø –ë—É–¥—É –ø–∏–∑–¥–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ "
    "—Å üåê ktmu-sutd.ru üåê "
    "–∏ –¥–µ–ª–∏—Ç—å—Å—è —Å {count}"
)
def format_welcome(is_group_chat: bool):
    if is_group_chat:
        return WELCOME.format(count="–≤–∞–º–∏")
    else:
        return WELCOME.format(count="—Ç–æ–±–æ–π")


GROUP_INPUT = (
    "üíÖ | –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ –§–æ—Ä–º–∞—Ç: 1–∫–¥–¥69, 1-–∫–¥–¥-69, 1–ö–î–î69, 1-–ö–î–î-69\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚ï∞ –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç—É, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ"
)
def format_group_input():
    return GROUP_INPUT


UNKNOWN_GROUP = (
    "‚ùì | {group} –ø–æ–∫–∞ –Ω–µ—Ç, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å?"
)
def format_unknown_group(group: str):
    return UNKNOWN_GROUP.format(group=group)


INVALID_GROUP = (
    "‚ùå | –≠—Ç–∞ —Ö—É–π–Ω—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç: 1–∫–¥–¥69, 1-–∫–¥–¥-69, 1–ö–î–î69, 1-–ö–î–î-69\n"
    "–ù–∞–ø–∏—à–∏ –µ—â—ë —Ä–∞–∑ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É"
)
def format_invalid_group():
    return INVALID_GROUP


SCHEDULE_BROADCAST = (
    "üîî | –•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∑–¥–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è?"
)
def format_schedule_broadcast():
    return SCHEDULE_BROADCAST


DO_PIN = (
    "üìå | –•–æ—á–µ—à—å —à–æ–± —è –∑–∞–∫—Ä–µ–ø–ª—è–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è?"
)
def format_do_pin():
    return DO_PIN


RECOMMEND_PIN = (
    "üìå | –Ø –º–æ–≥—É –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å —ç—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, "
    "–Ω–æ —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤"
)
def format_recommend_pin():
    return RECOMMEND_PIN


PERMIT_PIN_VK = (
    "üöΩ | –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞—Ä–∫–µ–ø, –Ω–∞–∑–Ω–∞—á—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º, "
    "–ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –µ—Å–ª–∏ –ø–æ–µ–±–∞—Ç—å"
)
PERMIT_PIN_TG = (
    "üöΩ | –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫—Ä–µ–ø, –Ω–∞–∑–Ω–∞—á—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º —Å –ø—Ä–∞–≤–æ–º "
    "\"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\", –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –µ—Å–ª–∏ –ø–æ–µ–±–∞—Ç—å"
)
def format_permit_pin(src: common.MESSENGER_SOURCE):
    if src == common.Source.VK:
        return PERMIT_PIN_VK
    if src == common.Source.TG:
        return PERMIT_PIN_TG


CANT_PIN_VK = (
    "–ù–µ—Ç —É –º–µ–Ω—è –Ω–∏—Ö—É—è, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –º–æ—é –∞–¥–º–∏–Ω–∫—É"
)
CANT_PIN_TG = (
    "–ù–µ—Ç —É –º–µ–Ω—è –Ω–∏—Ö—É—è, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –º–æ—ë –ø—Ä–∞–≤–æ \"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\""
)
def format_cant_pin(src: common.MESSENGER_SOURCE):
    if src == common.Source.VK:
        return CANT_PIN_VK
    if src == common.Source.TG:
        return CANT_PIN_TG


RECOMMEND_ADDING_ZOOM = (
    "üìù | –¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏, ID, –ø–∞—Ä–æ–ª–∏ Zoom, "
    "—á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
)
def format_recommend_adding_zoom():
    return RECOMMEND_ADDING_ZOOM


ZOOM_ADDING_TYPES_EXPLAIN = (
    f"üí¨ | {Text.FROM_TEXT} - –ø–µ—Ä–µ—Å—ã–ª–∞–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–∞–º–∏, "
    f"–∞–≤—Ç–æ–º–∞—Ç–æ–º –±–µ—Ä—ë—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
    f"‚úçÔ∏è | {Text.MANUALLY} - –¥–æ–±–∞–≤–ª—è–µ—à—å, –∏–∑–º–µ–Ω—è–µ—à—å, —É–¥–∞–ª—è–µ—à—å "
    f"–ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏"
)
def format_zoom_adding_types_explain():
    return ZOOM_ADDING_TYPES_EXPLAIN


FORWARD_ZOOM_DATA = (
    "üí¨ | –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ Zoom"
)
SEND_ZOOM_DATA = (
    "üí¨ | –°–∫–æ–ø–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ Zoom "
    "–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ"
)
def format_send_zoom_data(src: common.MESSENGER_SOURCE, is_group_chat: bool):
    if (src == common.Source.VK) or (src == common.Source.TG and not is_group_chat):
        return FORWARD_ZOOM_DATA
    else:
        return SEND_ZOOM_DATA


ZOOM_DATA_FORMAT = (
    "üìù | –§–æ—Ä–º–∞—Ç:\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ <–§–∞–º–∏–ª–∏—è> <–ò–º—è> <–û—Ç—á–µ—Å—Ç–≤–æ>\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ <–°—Å—ã–ª–∫–∞>\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ <ID>\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ <–ü–∞—Ä–æ–ª—å>\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ [–ü–£–°–¢–ê–Ø –°–¢–†–û–ö–ê]\n"
    "‚ÄÄ‚ÄÄ‚ÄÄ‚Üµ ..."
)
def format_zoom_data_format():
    return ZOOM_DATA_FORMAT

DOESNT_CONTAIN_ZOOM = (
    "‚ùå | Eblan? –ü–æ—Å–º–æ—Ç—Ä–∏ —Ñ–æ—Ä–º–∞—Ç, –ø–æ –Ω–µ–º—É —Ç—É—Ç –Ω–∏—Ö—É—è –Ω–µ—Ç ü§®\n"
    "ü§î | –ë–ª–æ–∫–∏ –±–µ–∑ –§–ò–û –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è"
)
def format_doesnt_contain_zoom():
    return DOESNT_CONTAIN_ZOOM


FINISH = (
    f"üëç | –§–ø—Ä–∏–Ω—Ü–∏–ø–∏ —Ñ—Å—ë, –º–æ–∂–µ—à—å –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–∞—Ç—å {Text.FINISH}"
)
def format_finish():
    return FINISH


if __name__ == "__main__":
    #print(format_group(groups="mommy", should_mention=True, mention="@mommy", should_reply=False))
    print(format_invalid_group("mommy"))